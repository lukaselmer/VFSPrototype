//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VFSBaseTests.DiskServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DiskServiceReference.IDiskService")]
    public interface IDiskService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/Register", ReplyAction="http://tempuri.org/IDiskService/RegisterResponse")]
        VFSBase.DiskServiceReference.User Register(string login, string hashedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/Register", ReplyAction="http://tempuri.org/IDiskService/RegisterResponse")]
        System.Threading.Tasks.Task<VFSBase.DiskServiceReference.User> RegisterAsync(string login, string hashedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/Login", ReplyAction="http://tempuri.org/IDiskService/LoginResponse")]
        VFSBase.DiskServiceReference.User Login([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string hashedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/Login", ReplyAction="http://tempuri.org/IDiskService/LoginResponse")]
        System.Threading.Tasks.Task<VFSBase.DiskServiceReference.User> LoginAsync(string login, string hashedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/Disks", ReplyAction="http://tempuri.org/IDiskService/DisksResponse")]
        VFSBase.DiskServiceReference.Disk[] Disks(VFSBase.DiskServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/Disks", ReplyAction="http://tempuri.org/IDiskService/DisksResponse")]
        System.Threading.Tasks.Task<VFSBase.DiskServiceReference.Disk[]> DisksAsync(VFSBase.DiskServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/CreateDisk", ReplyAction="http://tempuri.org/IDiskService/CreateDiskResponse")]
        VFSBase.DiskServiceReference.Disk CreateDisk(VFSBase.DiskServiceReference.User user, VFSBase.DiskServiceReference.DiskOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/CreateDisk", ReplyAction="http://tempuri.org/IDiskService/CreateDiskResponse")]
        System.Threading.Tasks.Task<VFSBase.DiskServiceReference.Disk> CreateDiskAsync(VFSBase.DiskServiceReference.User user, VFSBase.DiskServiceReference.DiskOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/DeleteDisk", ReplyAction="http://tempuri.org/IDiskService/DeleteDiskResponse")]
        bool DeleteDisk(VFSBase.DiskServiceReference.Disk disk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/DeleteDisk", ReplyAction="http://tempuri.org/IDiskService/DeleteDiskResponse")]
        System.Threading.Tasks.Task<bool> DeleteDiskAsync(VFSBase.DiskServiceReference.Disk disk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/FetchSynchronizationState", ReplyAction="http://tempuri.org/IDiskService/FetchSynchronizationStateResponse")]
        VFSBase.DiskServiceReference.SynchronizationState FetchSynchronizationState(VFSBase.DiskServiceReference.Disk disk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/FetchSynchronizationState", ReplyAction="http://tempuri.org/IDiskService/FetchSynchronizationStateResponse")]
        System.Threading.Tasks.Task<VFSBase.DiskServiceReference.SynchronizationState> FetchSynchronizationStateAsync(VFSBase.DiskServiceReference.Disk disk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/GetDiskOptions", ReplyAction="http://tempuri.org/IDiskService/GetDiskOptionsResponse")]
        VFSBase.DiskServiceReference.DiskOptions GetDiskOptions(VFSBase.DiskServiceReference.Disk disk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/GetDiskOptions", ReplyAction="http://tempuri.org/IDiskService/GetDiskOptionsResponse")]
        System.Threading.Tasks.Task<VFSBase.DiskServiceReference.DiskOptions> GetDiskOptionsAsync(VFSBase.DiskServiceReference.Disk disk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/SetDiskOptions", ReplyAction="http://tempuri.org/IDiskService/SetDiskOptionsResponse")]
        void SetDiskOptions(VFSBase.DiskServiceReference.Disk disk, VFSBase.DiskServiceReference.DiskOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/SetDiskOptions", ReplyAction="http://tempuri.org/IDiskService/SetDiskOptionsResponse")]
        System.Threading.Tasks.Task SetDiskOptionsAsync(VFSBase.DiskServiceReference.Disk disk, VFSBase.DiskServiceReference.DiskOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/WriteBlock", ReplyAction="http://tempuri.org/IDiskService/WriteBlockResponse")]
        void WriteBlock(string diskUuid, long blockNr, byte[] content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/WriteBlock", ReplyAction="http://tempuri.org/IDiskService/WriteBlockResponse")]
        System.Threading.Tasks.Task WriteBlockAsync(string diskUuid, long blockNr, byte[] content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/ReadBlock", ReplyAction="http://tempuri.org/IDiskService/ReadBlockResponse")]
        byte[] ReadBlock(string diskUuid, long blockNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/ReadBlock", ReplyAction="http://tempuri.org/IDiskService/ReadBlockResponse")]
        System.Threading.Tasks.Task<byte[]> ReadBlockAsync(string diskUuid, long blockNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/UpdateDisk", ReplyAction="http://tempuri.org/IDiskService/UpdateDiskResponse")]
        void UpdateDisk(VFSBase.DiskServiceReference.Disk disk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/UpdateDisk", ReplyAction="http://tempuri.org/IDiskService/UpdateDiskResponse")]
        System.Threading.Tasks.Task UpdateDiskAsync(VFSBase.DiskServiceReference.Disk disk);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDiskServiceChannel : VFSBaseTests.DiskServiceReference.IDiskService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DiskServiceClient : System.ServiceModel.ClientBase<VFSBaseTests.DiskServiceReference.IDiskService>, VFSBaseTests.DiskServiceReference.IDiskService {
        
        public DiskServiceClient() {
        }
        
        public DiskServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DiskServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiskServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiskServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public VFSBase.DiskServiceReference.User Register(string login, string hashedPassword) {
            return base.Channel.Register(login, hashedPassword);
        }
        
        public System.Threading.Tasks.Task<VFSBase.DiskServiceReference.User> RegisterAsync(string login, string hashedPassword) {
            return base.Channel.RegisterAsync(login, hashedPassword);
        }
        
        public VFSBase.DiskServiceReference.User Login(string login1, string hashedPassword) {
            return base.Channel.Login(login1, hashedPassword);
        }
        
        public System.Threading.Tasks.Task<VFSBase.DiskServiceReference.User> LoginAsync(string login, string hashedPassword) {
            return base.Channel.LoginAsync(login, hashedPassword);
        }
        
        public VFSBase.DiskServiceReference.Disk[] Disks(VFSBase.DiskServiceReference.User user) {
            return base.Channel.Disks(user);
        }
        
        public System.Threading.Tasks.Task<VFSBase.DiskServiceReference.Disk[]> DisksAsync(VFSBase.DiskServiceReference.User user) {
            return base.Channel.DisksAsync(user);
        }
        
        public VFSBase.DiskServiceReference.Disk CreateDisk(VFSBase.DiskServiceReference.User user, VFSBase.DiskServiceReference.DiskOptions options) {
            return base.Channel.CreateDisk(user, options);
        }
        
        public System.Threading.Tasks.Task<VFSBase.DiskServiceReference.Disk> CreateDiskAsync(VFSBase.DiskServiceReference.User user, VFSBase.DiskServiceReference.DiskOptions options) {
            return base.Channel.CreateDiskAsync(user, options);
        }
        
        public bool DeleteDisk(VFSBase.DiskServiceReference.Disk disk) {
            return base.Channel.DeleteDisk(disk);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDiskAsync(VFSBase.DiskServiceReference.Disk disk) {
            return base.Channel.DeleteDiskAsync(disk);
        }
        
        public VFSBase.DiskServiceReference.SynchronizationState FetchSynchronizationState(VFSBase.DiskServiceReference.Disk disk) {
            return base.Channel.FetchSynchronizationState(disk);
        }
        
        public System.Threading.Tasks.Task<VFSBase.DiskServiceReference.SynchronizationState> FetchSynchronizationStateAsync(VFSBase.DiskServiceReference.Disk disk) {
            return base.Channel.FetchSynchronizationStateAsync(disk);
        }
        
        public VFSBase.DiskServiceReference.DiskOptions GetDiskOptions(VFSBase.DiskServiceReference.Disk disk) {
            return base.Channel.GetDiskOptions(disk);
        }
        
        public System.Threading.Tasks.Task<VFSBase.DiskServiceReference.DiskOptions> GetDiskOptionsAsync(VFSBase.DiskServiceReference.Disk disk) {
            return base.Channel.GetDiskOptionsAsync(disk);
        }
        
        public void SetDiskOptions(VFSBase.DiskServiceReference.Disk disk, VFSBase.DiskServiceReference.DiskOptions options) {
            base.Channel.SetDiskOptions(disk, options);
        }
        
        public System.Threading.Tasks.Task SetDiskOptionsAsync(VFSBase.DiskServiceReference.Disk disk, VFSBase.DiskServiceReference.DiskOptions options) {
            return base.Channel.SetDiskOptionsAsync(disk, options);
        }
        
        public void WriteBlock(string diskUuid, long blockNr, byte[] content) {
            base.Channel.WriteBlock(diskUuid, blockNr, content);
        }
        
        public System.Threading.Tasks.Task WriteBlockAsync(string diskUuid, long blockNr, byte[] content) {
            return base.Channel.WriteBlockAsync(diskUuid, blockNr, content);
        }
        
        public byte[] ReadBlock(string diskUuid, long blockNr) {
            return base.Channel.ReadBlock(diskUuid, blockNr);
        }
        
        public System.Threading.Tasks.Task<byte[]> ReadBlockAsync(string diskUuid, long blockNr) {
            return base.Channel.ReadBlockAsync(diskUuid, blockNr);
        }
        
        public void UpdateDisk(VFSBase.DiskServiceReference.Disk disk) {
            base.Channel.UpdateDisk(disk);
        }
        
        public System.Threading.Tasks.Task UpdateDiskAsync(VFSBase.DiskServiceReference.Disk disk) {
            return base.Channel.UpdateDiskAsync(disk);
        }
    }
}
