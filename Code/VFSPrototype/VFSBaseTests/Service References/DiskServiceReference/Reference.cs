//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VFSBaseTests.DiskServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DiskServiceReference.IDiskService")]
    public interface IDiskService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/Register", ReplyAction="http://tempuri.org/IDiskService/RegisterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VFSBase.DiskServiceReference.ServiceFault), Action="http://tempuri.org/IDiskService/RegisterServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/VFSWCFContracts.FaultContracts")]
        VFSBase.DiskServiceReference.UserDto Register(string login, string hashedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/Register", ReplyAction="http://tempuri.org/IDiskService/RegisterResponse")]
        System.Threading.Tasks.Task<VFSBase.DiskServiceReference.UserDto> RegisterAsync(string login, string hashedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/Login", ReplyAction="http://tempuri.org/IDiskService/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VFSBase.DiskServiceReference.ServiceFault), Action="http://tempuri.org/IDiskService/LoginServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/VFSWCFContracts.FaultContracts")]
        VFSBase.DiskServiceReference.UserDto Login([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string hashedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/Login", ReplyAction="http://tempuri.org/IDiskService/LoginResponse")]
        System.Threading.Tasks.Task<VFSBase.DiskServiceReference.UserDto> LoginAsync(string login, string hashedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/Disks", ReplyAction="http://tempuri.org/IDiskService/DisksResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VFSBase.DiskServiceReference.ServiceFault), Action="http://tempuri.org/IDiskService/DisksServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/VFSWCFContracts.FaultContracts")]
        VFSBase.DiskServiceReference.DiskDto[] Disks(VFSBase.DiskServiceReference.UserDto userDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/Disks", ReplyAction="http://tempuri.org/IDiskService/DisksResponse")]
        System.Threading.Tasks.Task<VFSBase.DiskServiceReference.DiskDto[]> DisksAsync(VFSBase.DiskServiceReference.UserDto userDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/CreateDisk", ReplyAction="http://tempuri.org/IDiskService/CreateDiskResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VFSBase.DiskServiceReference.ServiceFault), Action="http://tempuri.org/IDiskService/CreateDiskServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/VFSWCFContracts.FaultContracts")]
        VFSBase.DiskServiceReference.DiskDto CreateDisk(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskOptionsDto optionsDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/CreateDisk", ReplyAction="http://tempuri.org/IDiskService/CreateDiskResponse")]
        System.Threading.Tasks.Task<VFSBase.DiskServiceReference.DiskDto> CreateDiskAsync(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskOptionsDto optionsDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/DeleteDisk", ReplyAction="http://tempuri.org/IDiskService/DeleteDiskResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VFSBase.DiskServiceReference.ServiceFault), Action="http://tempuri.org/IDiskService/DeleteDiskServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/VFSWCFContracts.FaultContracts")]
        bool DeleteDisk(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/DeleteDisk", ReplyAction="http://tempuri.org/IDiskService/DeleteDiskResponse")]
        System.Threading.Tasks.Task<bool> DeleteDiskAsync(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/FetchSynchronizationState", ReplyAction="http://tempuri.org/IDiskService/FetchSynchronizationStateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VFSBase.DiskServiceReference.ServiceFault), Action="http://tempuri.org/IDiskService/FetchSynchronizationStateServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/VFSWCFContracts.FaultContracts")]
        VFSBase.DiskServiceReference.SynchronizationState FetchSynchronizationState(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/FetchSynchronizationState", ReplyAction="http://tempuri.org/IDiskService/FetchSynchronizationStateResponse")]
        System.Threading.Tasks.Task<VFSBase.DiskServiceReference.SynchronizationState> FetchSynchronizationStateAsync(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/GetDiskOptions", ReplyAction="http://tempuri.org/IDiskService/GetDiskOptionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VFSBase.DiskServiceReference.ServiceFault), Action="http://tempuri.org/IDiskService/GetDiskOptionsServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/VFSWCFContracts.FaultContracts")]
        VFSBase.DiskServiceReference.DiskOptionsDto GetDiskOptions(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/GetDiskOptions", ReplyAction="http://tempuri.org/IDiskService/GetDiskOptionsResponse")]
        System.Threading.Tasks.Task<VFSBase.DiskServiceReference.DiskOptionsDto> GetDiskOptionsAsync(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/SetDiskOptions", ReplyAction="http://tempuri.org/IDiskService/SetDiskOptionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VFSBase.DiskServiceReference.ServiceFault), Action="http://tempuri.org/IDiskService/SetDiskOptionsServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/VFSWCFContracts.FaultContracts")]
        void SetDiskOptions(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto, VFSBase.DiskServiceReference.DiskOptionsDto optionsDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/SetDiskOptions", ReplyAction="http://tempuri.org/IDiskService/SetDiskOptionsResponse")]
        System.Threading.Tasks.Task SetDiskOptionsAsync(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto, VFSBase.DiskServiceReference.DiskOptionsDto optionsDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/WriteBlock", ReplyAction="http://tempuri.org/IDiskService/WriteBlockResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VFSBase.DiskServiceReference.ServiceFault), Action="http://tempuri.org/IDiskService/WriteBlockServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/VFSWCFContracts.FaultContracts")]
        void WriteBlock(VFSBase.DiskServiceReference.UserDto userDto, int diskId, long blockNr, byte[] content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/WriteBlock", ReplyAction="http://tempuri.org/IDiskService/WriteBlockResponse")]
        System.Threading.Tasks.Task WriteBlockAsync(VFSBase.DiskServiceReference.UserDto userDto, int diskId, long blockNr, byte[] content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/ReadBlock", ReplyAction="http://tempuri.org/IDiskService/ReadBlockResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VFSBase.DiskServiceReference.ServiceFault), Action="http://tempuri.org/IDiskService/ReadBlockServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/VFSWCFContracts.FaultContracts")]
        byte[] ReadBlock(VFSBase.DiskServiceReference.UserDto userDto, int diskId, long blockNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/ReadBlock", ReplyAction="http://tempuri.org/IDiskService/ReadBlockResponse")]
        System.Threading.Tasks.Task<byte[]> ReadBlockAsync(VFSBase.DiskServiceReference.UserDto userDto, int diskId, long blockNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/UpdateDisk", ReplyAction="http://tempuri.org/IDiskService/UpdateDiskResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(VFSBase.DiskServiceReference.ServiceFault), Action="http://tempuri.org/IDiskService/UpdateDiskServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/VFSWCFContracts.FaultContracts")]
        void UpdateDisk(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskService/UpdateDisk", ReplyAction="http://tempuri.org/IDiskService/UpdateDiskResponse")]
        System.Threading.Tasks.Task UpdateDiskAsync(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDiskServiceChannel : VFSBaseTests.DiskServiceReference.IDiskService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DiskServiceClient : System.ServiceModel.ClientBase<VFSBaseTests.DiskServiceReference.IDiskService>, VFSBaseTests.DiskServiceReference.IDiskService {
        
        public DiskServiceClient() {
        }
        
        public DiskServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DiskServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiskServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiskServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public VFSBase.DiskServiceReference.UserDto Register(string login, string hashedPassword) {
            return base.Channel.Register(login, hashedPassword);
        }
        
        public System.Threading.Tasks.Task<VFSBase.DiskServiceReference.UserDto> RegisterAsync(string login, string hashedPassword) {
            return base.Channel.RegisterAsync(login, hashedPassword);
        }
        
        public VFSBase.DiskServiceReference.UserDto Login(string login1, string hashedPassword) {
            return base.Channel.Login(login1, hashedPassword);
        }
        
        public System.Threading.Tasks.Task<VFSBase.DiskServiceReference.UserDto> LoginAsync(string login, string hashedPassword) {
            return base.Channel.LoginAsync(login, hashedPassword);
        }
        
        public VFSBase.DiskServiceReference.DiskDto[] Disks(VFSBase.DiskServiceReference.UserDto userDto) {
            return base.Channel.Disks(userDto);
        }
        
        public System.Threading.Tasks.Task<VFSBase.DiskServiceReference.DiskDto[]> DisksAsync(VFSBase.DiskServiceReference.UserDto userDto) {
            return base.Channel.DisksAsync(userDto);
        }
        
        public VFSBase.DiskServiceReference.DiskDto CreateDisk(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskOptionsDto optionsDto) {
            return base.Channel.CreateDisk(userDto, optionsDto);
        }
        
        public System.Threading.Tasks.Task<VFSBase.DiskServiceReference.DiskDto> CreateDiskAsync(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskOptionsDto optionsDto) {
            return base.Channel.CreateDiskAsync(userDto, optionsDto);
        }
        
        public bool DeleteDisk(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto) {
            return base.Channel.DeleteDisk(userDto, diskDto);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDiskAsync(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto) {
            return base.Channel.DeleteDiskAsync(userDto, diskDto);
        }
        
        public VFSBase.DiskServiceReference.SynchronizationState FetchSynchronizationState(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto) {
            return base.Channel.FetchSynchronizationState(userDto, diskDto);
        }
        
        public System.Threading.Tasks.Task<VFSBase.DiskServiceReference.SynchronizationState> FetchSynchronizationStateAsync(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto) {
            return base.Channel.FetchSynchronizationStateAsync(userDto, diskDto);
        }
        
        public VFSBase.DiskServiceReference.DiskOptionsDto GetDiskOptions(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto) {
            return base.Channel.GetDiskOptions(userDto, diskDto);
        }
        
        public System.Threading.Tasks.Task<VFSBase.DiskServiceReference.DiskOptionsDto> GetDiskOptionsAsync(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto) {
            return base.Channel.GetDiskOptionsAsync(userDto, diskDto);
        }
        
        public void SetDiskOptions(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto, VFSBase.DiskServiceReference.DiskOptionsDto optionsDto) {
            base.Channel.SetDiskOptions(userDto, diskDto, optionsDto);
        }
        
        public System.Threading.Tasks.Task SetDiskOptionsAsync(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto, VFSBase.DiskServiceReference.DiskOptionsDto optionsDto) {
            return base.Channel.SetDiskOptionsAsync(userDto, diskDto, optionsDto);
        }
        
        public void WriteBlock(VFSBase.DiskServiceReference.UserDto userDto, int diskId, long blockNr, byte[] content) {
            base.Channel.WriteBlock(userDto, diskId, blockNr, content);
        }
        
        public System.Threading.Tasks.Task WriteBlockAsync(VFSBase.DiskServiceReference.UserDto userDto, int diskId, long blockNr, byte[] content) {
            return base.Channel.WriteBlockAsync(userDto, diskId, blockNr, content);
        }
        
        public byte[] ReadBlock(VFSBase.DiskServiceReference.UserDto userDto, int diskId, long blockNr) {
            return base.Channel.ReadBlock(userDto, diskId, blockNr);
        }
        
        public System.Threading.Tasks.Task<byte[]> ReadBlockAsync(VFSBase.DiskServiceReference.UserDto userDto, int diskId, long blockNr) {
            return base.Channel.ReadBlockAsync(userDto, diskId, blockNr);
        }
        
        public void UpdateDisk(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto) {
            base.Channel.UpdateDisk(userDto, diskDto);
        }
        
        public System.Threading.Tasks.Task UpdateDiskAsync(VFSBase.DiskServiceReference.UserDto userDto, VFSBase.DiskServiceReference.DiskDto diskDto) {
            return base.Channel.UpdateDiskAsync(userDto, diskDto);
        }
    }
}
